import { app, BrowserWindow, ipcMain, shell } from 'electron';
import path from 'path';
import fs from 'fs/promises';
import fsSync from 'fs';
import axios from 'axios';
import FormData from 'form-data';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const SERVER_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';

const localWatchers = new Map<string, fsSync.FSWatcher>();
const remoteIntervals = new Map<string, NodeJS.Timeout>();

async function uploadFile(taskId: string, filePath: string) {
  const form = new FormData();
  form.append('files', fsSync.createReadStream(filePath));
  await axios.post(`${SERVER_URL}/api/jobs/${taskId}/upload`, form, {
    headers: form.getHeaders(),
  });
}

async function deleteFile(taskId: string, filename: string) {
  await axios.post(`${SERVER_URL}/api/jobs/${taskId}/delete-file`, { filename });
}

async function syncFromServer(taskId: string, localFolder: string) {
  const { data } = await axios.get(
    `${SERVER_URL}/api/jobs/${taskId}/files`
  );
  for (const file of data) {
    const localPath = path.join(localFolder, file.relativePath);
    if (!fsSync.existsSync(localPath)) {
      const response = await axios.get(file.url, { responseType: 'stream' });
      await fs.mkdir(path.dirname(localPath), { recursive: true });
      const writer = fsSync.createWriteStream(localPath);
      response.data.pipe(writer);
      await new Promise((res, rej) => {
        writer.on('finish', res);
        writer.on('error', rej);
      });
    }
  }
}

function startSync(taskId: string, localFolder: string) {
  if (localWatchers.has(taskId)) return;

  const watcher = fsSync.watch(
    localFolder,
    { recursive: true },
    (eventType, filename) => {
      if (!filename) return;
      const fullPath = path.join(localFolder, filename);
      if (eventType === 'rename') {
        if (fsSync.existsSync(fullPath)) {
          uploadFile(taskId, fullPath).catch(() => {});
        } else {
          deleteFile(taskId, filename).catch(() => {});
        }
      } else if (eventType === 'change') {
        if (fsSync.existsSync(fullPath)) {
          uploadFile(taskId, fullPath).catch(() => {});
        }
      }
    }
  );

  localWatchers.set(taskId, watcher);
  const interval = setInterval(() => {
    syncFromServer(taskId, localFolder).catch(() => {});
  }, 10000);
  remoteIntervals.set(taskId, interval);
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL('http://localhost:3000');

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.

app.on('ready', () => {

  // This is our new "backend" logic
  ipcMain.handle(
    'download-and-open-task-folder',
    async (
      _,
      taskId: string,
      folderName: string,
      filesToDownload: { filename: string; relativePath: string; url: string }[]
    ) => {
      const safeFolderName = folderName.replace(/[\\/:*?"<>|]/g, '').trim();
      const destinationFolder = path.join(app.getPath('downloads'), safeFolderName);
      await fs.mkdir(destinationFolder, { recursive: true });

      const downloadPromises = filesToDownload.map(async (file) => {
        // Construct the full local path, including subdirectories
        const localFilePath = path.join(destinationFolder, file.relativePath);

        // ** THIS IS THE KEY NEW STEP **
        // Ensure the sub-folder structure exists before trying to write the file
        await fs.mkdir(path.dirname(localFilePath), { recursive: true });

        // The rest of the download logic is the same
        const response = await axios({
          url: file.url,
          method: 'GET',
          responseType: 'stream',
        });
        
        const writer = require('fs').createWriteStream(localFilePath);
        response.data.pipe(writer);

        return new Promise((resolve, reject) => {
          writer.on('finish', resolve);
          writer.on('error', reject);
        });
      });

      // This part remains unchanged
      await Promise.all(downloadPromises);
      await shell.openPath(destinationFolder);
      startSync(taskId, destinationFolder);
    }
  );

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

